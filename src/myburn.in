#!/bin/bash

# This script is a wrapper around mythburn.py, which does most of the work
# for mytharchive.
# I prefer to use it rather than mytharchive, because that way, I can still
# watch recording with mythfrontend while this script is busy prepping files
# to burn to DVD.
# It assumes you have set up a mytharchive job file,
# $MYTHARCHIVETMP/config/mydata.xml
# This is a file that mytharchive uses to tell mythburn.py what recordings
# and videos you want to burn to DVD.
# If you've ever burned a DVD, you probably have such a file in your
# "Myth Archive Temp Directory."

# Please note the options attributes in my example job file, mydata.xml
# I have disabled:
# - creating an ISO with createiso="0"
# - burning a DVD with doburn="0"
# I have also added another attribute, rundvdauthor="0"
# You won't find rundvdauthor in a job file created by mytharchive
# It is recognized by my version of mythburn.py,
# and tells it not to execute dvdauthor.
# That saves us some time in processing because this script will run dvdauthor
# after adding subtitles to the final.mpg files.
# I have included a patch for mythburn.py, based on 0.20.2.

# If you're not comfortable editing $MYHTARCHIVETMP/config/mydata.xml by hand,
# another option is to go ahead and use mytharchive to create the job file,
# then run this script after mytharchive is done.
# If you do, be sure to disable the options "Create ISO" and "Burn DVD"
# in the last MythArchive screen.

# You need to disable "Use FIFOs" in MythArchive Settings.
# MythArchive Settings are found in mythfrontend:
# Utilities/Setup -> Setup -> Media Settings -> Archive Files Settings
# "Use FIFOs" is the 4th option on Page 2
# If you don't, the calls in this script to spumux to add subtitles won't work.
# This does mean you'll use more disk space to create DVDs than you did before.

# MYTHARCHIVETMP should be set to the value of your "Myth Archive Temp Directory."
# It is the first option on page 1 of MythArchive Settings.
# The configure script should have set this.
MYTHARCHIVETMP=@MYTHARCHIVETMP@

# MYTHARCHIVEDIR should be set to the location where mytharchive, and other
# mythtv plugins, are installed.
# The configure script should have set this.
MYTHARCHIVEDIR=@MYTHARCHIVEDIR@

# The following variable determines whether to run tweakdvdxml.py
# tweakdvdxml.py does some postprocessing on the dvdauthor.xml script
# created by mythburn. It puts all the titles into one titleset, and tells
# a dvd player to play titles one after another,
# instead of going back to the main menu after playing each title.
# It also moves the main menu from root menu to the titleset.
# That's because it's most convenient with my universal remote.
# I have only tested this script with dvdauthor.xml files created with
# my own theme, so you probably should set this value to false.
# FWIW, I think it will work with the Compact theme.
# The configure script should have set this.
RUNTWEAKDVDXML=@RUNTWEAKDVDXML@

# The name of your dvd device.
# The configure script should have set this.
DEVDVD=@DEVDVD@

date "+%F %T myburn[$$] begin"

mkdir -p $MYTHARCHIVETMP/logs
rm -rf $MYTHARCHIVETMP/work
mkdir -p $MYTHARCHIVETMP/work

date "+%F %T myburn[$$] Executing mythburn"
python $MYTHARCHIVEDIR/scripts/mythburn.py -j $MYTHARCHIVETMP/config/mydata.xml -l $MYTHARCHIVETMP/logs/progress.log || exit $?

# Get options from mydata.xml
eval `grep '<options' $MYTHARCHIVETMP/config/mydata.xml | sed -e 's|.*<options ||' -e 's| />||'`

if [ "$RUNTWEAKDVDXML" = true ]
then
    date "+%F %T myburn[$$] Executing tweakdvdxml.py"
    infile=$MYTHARCHIVETMP/work/dvdauthor.xml
    [ -f $MYTHARCHIVETMP/work/dvdauthor_orig.xml ] && infile=$MYTHARCHIVETMP/work/dvdauthor_orig.xml
    # tweakdvdxml.py can't handle every dvdauthor.xml that mythburn.py creates
    # If it succeeds, save the old and move the new into its place
    # If it fails, don't do anything
    tweakdvdxml.py -t $MYTHARCHIVETMP -i $infile && \
    (
        [ ! -f $MYTHARCHIVETMP/work/dvdauthor_orig.xml ] && \
            mv $MYTHARCHIVETMP/work/dvdauthor.xml $MYTHARCHIVETMP/work/dvdauthor_orig.xml
        mv -f $MYTHARCHIVETMP/work/new-dvdauthor.xml $MYTHARCHIVETMP/work/dvdauthor.xml
    )
fi

# Post process each file that mythburn has prepped for DVD burning
for dir in $MYTHARCHIVETMP/work/[1-9]*
do

    # Mythburn creates one directory per recording and names them 1,2,3...
    # This test is double checking that the pattern above found those
    # working directories
    [ ! -d $dir ] && continue

    # Find the original recording file
    streaminfo=$dir/streaminfo.xml
    [ -f $dir/streaminfo_orig.xml ] && streaminfo=$dir/streaminfo_orig.xml
    recording=`grep filename= $streaminfo | \
        sed -e 's/.*filename="//' -e 's/".*//'`
    mkdir -p $dir/subs

    date "+%F %T myburn[$$] Checking $recording for CC/Teletext"

    # Scan the file, looking for closed captions
    # If any are found, they'll be converted to .png images
    # and the file, spumux.xml, will be built with references
    # to the images and timestamps.

    # Note: LD_LIBRARY_PATH is set in case you have installed a
    # patched libzvbi library with the same prefix as
    # cc2subtitles.
    # We will try a second time with a skip count, in case there's
    # an "End of Caption" sequence at the beginning throwing things off.
    LD_LIBRARY_PATH=@libdir@ \
        cc2subtitles -i $recording -p $dir/subs/ -x $dir/spumux.xml || \
    LD_LIBRARY_PATH=@libdir@ \
        cc2subtitles -s 10 -i $recording -p $dir/subs/ -x $dir/spumux.xml || \
        continue

    # A little test allowing this script to be reentrant.
    infile=$dir/final.mpg
    [ -f $dir/final_orig.mpg ] && infile=$dir/final_orig.mpg
    outfile=$dir/new-final.mpg

    date "+%F %T myburn[$$] Adding subtitles to $outfile"

    # Let spumux (a dvdauthor tool) convert the .png images into subtitles
    # and add them to the final.mpg file.
    spumux $dir/spumux.xml < $infile > $outfile || { rm $outfile; continue; }

    # If spumux succeeds, the final.mpg built by mythburn is renamed to
    # final_orig.mpgC and the one with subtitles is renamed final.mpg
    # That's the name specified in dvdauthor.xml
    [ ! -f $dir/final_orig.mpg ] && mv $dir/final.mpg $dir/final_orig.mpg
    mv -f $outfile $dir/final.mpg
done

date "+%F %T myburn[$$] Executing dvdauthor"
rm -rf $MYTHARCHIVETMP/work/dvd
dvdauthor -x $MYTHARCHIVETMP/work/dvdauthor.xml || exit $?

# I've had trouble burning DVDs on occasion, so I prefer to create an ISO
# and then burn the ISO to dvd. If you trust growisofs to do both steps
# successfully, feel free to change these commands to your liking.
# Especially if you don't have the disk space to play with.

date "+%F %T myburn[$$] Executing mkisofs"
mkisofs -dvd-video -V 'Test' -o $MYTHARCHIVETMP/work/mythburn.iso $MYTHARCHIVETMP/work/dvd || exit $?

growopts=""
[ "$mediatype" = 2 -a "$erasedvdrw" != 0 ] && growopts="-use-the-force-luke"

date "+%F %T myburn[$$] Executing growisofs $growopts"
growisofs -dvd-compat $growopts -Z $DEVDVD=$MYTHARCHIVETMP/work/mythburn.iso || exit $?

date "+%F %T myburn[$$] Success!"
