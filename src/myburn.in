#!/bin/bash

# This script is a wrapper around mythburn.py, which does most of the work
# for mytharchive.
# I prefer to use it rather than mytharchive, because that way, I can still
# watch recording with mythfrontend while this script is busy prepping files
# to burn to DVD.
# It assumes you have set up a mytharchive job file,
# $MYTHARCHIVETMP/config/mydata.xml
# This is a file that mytharchive uses to tell mythburn.py what recordings
# and videos you want to burn to DVD.
# If you've ever burned a DVD, you probably have such a file in your
# "Myth Archive Temp Directory."

# Please note the options attributes in my example job file, mydata.xml
# I have added another attribute, rundvdauthor="0"
# You won't find rundvdauthor in a job file created by mytharchive
# It is recognized by my version of mythburn.py,
# and tells it not to execute dvdauthor.
# That saves us some time in processing because this script will run dvdauthor
# after adding subtitles to the final.mpg files.
# I have included patches for mythburn.py, one for 0.20.2 and one for 0.21.

# If you're not comfortable editing $MYHTARCHIVETMP/config/mydata.xml by hand,
# another option is to go ahead and use mytharchive to create the job file,
# then run this script after mytharchive is done.
# If you do, be sure to disable the options "Create ISO" and "Burn DVD"
# in the last MythArchive screen.

# MYTHARCHIVETMP should be set to the value of your "Myth Archive Temp Directory."
# It is the first option on page 1 of MythArchive Settings.
# The configure script should have set this.
MYTHARCHIVETMP=@MYTHARCHIVETMP@

# MYTHARCHIVEDIR should be set to the location where mytharchive, and other
# mythtv plugins, are installed.
# The configure script should have set this.
MYTHARCHIVEDIR=@MYTHARCHIVEDIR@

# The name of your dvd device.
# The configure script should have set this.
# But you can override it by setting the environment variable.
DEVDVD=${DEVDVD-@DEVDVD@}

# Should FIFOs (named pipes) be used to reduce disk space requirements?
# The configure script should have set this.
# But you can override it by setting the environment variable.
USEFIFOS=${USEFIFOS-@USEFIFOS@}

# Should we create an ISO image?
# The configure script should have set this.
# But you can override it by setting the environment variable.
CREATEISO=${CREATEISO-@CREATEISO@}

# Get the theme name from mydata.xml
eval `grep '<job ' $MYTHARCHIVETMP/config/mydata.xml | sed -e 's|.*<job ||' -e 's| *>||'`

# Get options from mydata.xml
eval `grep '<options ' $MYTHARCHIVETMP/config/mydata.xml | sed -e 's|.*<options ||' -e 's| */>||'`

# The following variable determines whether to run tweakdvdxml.py
# tweakdvdxml.py does some postprocessing on the dvdauthor.xml script
# created by mythburn. It puts all the titles into one titleset, and tells
# a dvd player to play titles one after another,
# instead of going back to the main menu after playing each title.
# It also moves the main menu from root menu to the titleset.
# That's because it's most convenient with my universal remote.
# I have only tested tweakdvdxml.py with dvdauthor.xml files created with
# my own theme, mytheme, so this value is only true if theme="mytheme".
# However, it may work with the Compact theme.
if [ "$theme" = "xmytheme" ]
then
    RUNTWEAKDVDXML=true
else
    RUNTWEAKDVDXML=false
fi

# Sometimes, when mythburn.py runs mythtranscode, mythtranscode fails with
# this error:
# ICE default IO error handler doing an exit(), pid = <pid>, errno = 32
# Turns out it happens just as mythtranscode is about to exit successfully,
# Something goes wrong when Qt's QApplication's destructor is called, which
# destroys a QSessionManager, which calls SmcCloseConnection,
# which calls IceFlush, which calls IceWrite, etc.,
# which causes a SIGPIPE signal.
# Why a non-gui application should be doing anything related to
# session management is beyond me. I suspect a Qt bug that doesn't remember
# when a QApplicatiuon was instantiated as a non-gui app.
# What's interesting is that the problem occurs when you run this script
# from an xterm window but not when you run it from a remote shell, like ssh.
# The difference is whether the environment variable, SESSION_MANAGER, is set.
# Unsetting this variable prevents the problem.
unset SESSION_MANAGER

processFile()
{
    dir=$1
    # Find the original recording file
    streaminfo=$dir/streaminfo.xml
    [ -f $dir/streaminfo_orig.xml ] && streaminfo=$dir/streaminfo_orig.xml
    recording=`grep filename= $streaminfo | \
        sed -e 's/.*filename="//' -e 's/".*//'`

    usecutlist=`grep '<usecutlist>' $dir/info.xml | sed -e 's/.*<usecutlist>//' -e 's/<\/usecutlist>.*//'`
    date "+%F %T myburn[$$] $dir: usecutlist=$usecutlist"

    fudgeFactor=0
if [ "$usecutlist" = "1" ]
then
    recording=$dir/newfile.mpg
    streaminfo=$dir/streaminfo.xml
else
    # Check if there's an .orig recording
    # If so, the recording has been transcoded and the .orig file
    # is the one that still has closed captions
    if [ -f $recording.orig ]
    then
        recording=$recording.orig
        # Generate streaminfo for the original file
        mytharchivehelper -i $recording $dir/streaminfo.xml.orig 0 && \
            streaminfo=$dir/streaminfo.xml.orig
    fi

    # Extract durations for both original file and massaged file
    # If the type is nuv, the duration info is useless
    type=`grep type= $streaminfo | \
        sed -e 's/.*type="//' -e 's/".*//'`
    if [ "$type" != nuv ]
    then
        origduration=`grep duration= $streaminfo | \
            sed -e 's/.*duration="//' -e 's/".*//'`
        newduration=`grep duration= $dir/streaminfo.xml | \
            sed -e 's/.*duration="//' -e 's/".*//'`
        fudgeFactor=`echo $newduration $origduration |awk '{print $1 / $2 }'`
        # Check for reasonable values, durations might be out of whack
        # If unreasonable, set to 0 so mythsubtitles will set default value
        if [ $? != 0 ]
        then
            date "+%F %T myburn[$$] $dir: Unreasonable durations=$newduration/$origduration fudgeFactor=$fudgeFactor"
            fudgeFactor=0
        elif expr $fudgeFactor \< 0.8
        then
            date "+%F %T myburn[$$] $dir: Unreasonable durations=$newduration/$origduration fudgeFactor=$fudgeFactor"
            fudgeFactor=0
        elif expr $fudgeFactor \> 1.2
        then
            date "+%F %T myburn[$$] $dir: Unreasonable durations=$newduration/$origduration fudgeFactor=$fudgeFactor"
            fudgeFactor=0
        fi
    fi
fi

    # mkdir -p $dir/subs

    date "+%F %T myburn[$$] $dir: Checking `basename $recording` for CC/Teletext fudgeFactor=$fudgeFactor"

    # Scan the file, looking for closed captions
    # If any are found, they'll be converted to .png images
    # and the file, spumux.xml, will be built with references
    # to the images and timestamps.

    # Note: LD_LIBRARY_PATH is set in case you have installed a
    # patched libzvbi library with the same prefix as
    # cc2subtitles.
    # LD_LIBRARY_PATH=@libdir@ \
    #    @SUBTITLE_PROG@ -i $recording -p $dir/subs/ -x $dir/spumux.xml -f $fudgeFactor || \
    ccextractor -out=spupng -o $dir/newfile.xml $recording || \
        return

    # the final.mpg built by mythburn is renamed to final_orig.mpg
    # and the one with subtitles will be final.mpg
    # That's the name specified in dvdauthor.xml
    [ ! -e $dir/final_orig.mpg ] && mv $dir/final.mpg $dir/final_orig.mpg

    infile=$dir/final_orig.mpg
    outfile=$dir/final.mpg

    [ "$USEFIFOS" = true ] && mkfifo $outfile

    date "+%F %T myburn[$$] $dir: Adding subtitles"

    # Let spumux (a dvdauthor tool) convert the .png images into subtitles
    # and add them to the final.mpg file.
    (
        # if spumux $dir/spumux.xml < $infile > $outfile
        if spumux $dir/newfile.xml < $infile > $outfile
        then
            date "+%F %T myburn[$$] $dir: Finished CC/Teletext processing"
        else
            mv -f $infile $outfile
            return
        fi
    ) &

    # If we aren't using fifos, wait for spumux to finish
    # Otherwise, return and let dvdauthor read the fifos
    # as spumux writes to them.
    [ "$USEFIFOS" != true ] && wait

}

date "+%F %T myburn[$$] begin"

renice +10 -p $$

mkdir -p $MYTHARCHIVETMP/logs
rm -rf $MYTHARCHIVETMP/work
mkdir -p $MYTHARCHIVETMP/work

date "+%F %T myburn[$$] Executing mythburn"
python $MYTHARCHIVEDIR/scripts/mythburn.py -j $MYTHARCHIVETMP/config/mydata.xml -l $MYTHARCHIVETMP/logs/progress.log || exit $?

# mythburn doesn't exit with a non-zero exit code when there's a problem
# like a non-existant file.
[ -f $MYTHARCHIVETMP/work/dvdauthor.xml ] || exit 1

if [ "$RUNTWEAKDVDXML" = true ]
then
    date "+%F %T myburn[$$] Executing tweakdvdxml.py"
    infile=$MYTHARCHIVETMP/work/dvdauthor.xml
    [ -f $MYTHARCHIVETMP/work/dvdauthor_orig.xml ] && infile=$MYTHARCHIVETMP/work/dvdauthor_orig.xml
    # tweakdvdxml.py can't handle every dvdauthor.xml that mythburn.py creates
    # If it succeeds, save the old and move the new into its place
    # If it fails, don't do anything
    tweakdvdxml.py -t $MYTHARCHIVETMP -i $infile && \
    (
        [ ! -f $MYTHARCHIVETMP/work/dvdauthor_orig.xml ] && \
            mv $MYTHARCHIVETMP/work/dvdauthor.xml $MYTHARCHIVETMP/work/dvdauthor_orig.xml
        mv -f $MYTHARCHIVETMP/work/new-dvdauthor.xml $MYTHARCHIVETMP/work/dvdauthor.xml
    )
fi

# Post process each file that mythburn has prepped for DVD burning
for dir in $MYTHARCHIVETMP/work/[1-9]*
do

    # Mythburn creates one directory per recording and names them 1,2,3...
    # This test is double checking that the pattern above found those
    # working directories
    [ ! -d $dir ] && continue

    processFile $dir &

done

wait

date "+%F %T myburn[$$] Executing dvdauthor -x $MYTHARCHIVETMP/work/dvdauthor.xml"
rm -rf $MYTHARCHIVETMP/work/dvd
dvdauthor -x $MYTHARCHIVETMP/work/dvdauthor.xml || exit $?

growopts=""
[ "$mediatype" = 2 -a "$erasedvdrw" != 0 ] && growopts="-use-the-force-luke"

if [ "$CREATEISO" = true ]
then

    date "+%F %T myburn[$$] Executing mkisofs -dvd-video -V 'MyBurn' -o $MYTHARCHIVETMP/work/mythburn.iso $MYTHARCHIVETMP/work/dvd"
    mkisofs -dvd-video -V 'MyBurn' -o $MYTHARCHIVETMP/work/mythburn.iso $MYTHARCHIVETMP/work/dvd || exit $?

    date "+%F %T myburn[$$] Executing growisofs -dvd-compat $growopts -Z $DEVDVD=$MYTHARCHIVETMP/work/mythburn.iso"
    growisofs -dvd-compat $growopts -Z $DEVDVD=$MYTHARCHIVETMP/work/mythburn.iso || exit $?

else

    date "+%F %T myburn[$$] Executing growisofs -dvd-video -V 'MyBurn' $growopts -Z $DEVDVD $MYTHARCHIVETMP/work/dvd"
    growisofs -dvd-video -V 'MyBurn' $growopts -Z $DEVDVD $MYTHARCHIVETMP/work/dvd || exit $?

fi

date "+%F %T myburn[$$] Success!"
